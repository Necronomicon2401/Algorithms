#include <iostream>
#include <string>
#include <vector>
#include <sstream>


using namespace std;

int main()
{
	setlocale(LC_ALL, "Russian");
	// буква ё не используется (вместо нее е)
	int M[32][32];
	for (int i = 0; i < 32; i++) {
		for (int j = 0; j < 32; j++) {
			M[i][j] = 0;
		}
	}

	string word;
	string towns = "Караганда Воронеж Киев Жданов Витебск Архангельск Ангола Алжир Рига";
	stringstream ss(towns);//Инициализация строкового потока
	vector <string> array;//Вектор, каждый элемент которого слово из текста
	while (ss >> word)
		array.push_back(word);

	for (int i = 0; i < array.size(); i++) {
		array[i][0] = tolower(array[i][0]);
	}

	for (int i = 0; i < array.size(); i++) {
		int a = (int)array[i][0] + 32;
		int b = (int)array[i][array[i].length() - 1] + 32;
		M[a][b] += 1;
	}

	// Ориентированный граф имеет эйлеровый цикл, если для каждой вершины графа её входящая степень
	// равна её исходящей степени , то есть в вершину входит столько же ребер, сколько из неё и выходит:
	// поэтому сделаем матрицу смежности для графа, где вершины - буквы, а ребра - слова (первая и последняя буква слова)
	// далее посчитаем, чтобы в каждом i-ом столбце и строке было одинакавая сумма чисел (за исключением позиций [i][i] - т.к. это петли) - 
	// это будет количество входящих и исходящих из i-ой вершины ребер
	// если их количество одинаковое, то граф имеет эйлеров цикл и условие выполняется

	// вывод матрицы смежности если надо
	//for (int i = 0; i < 32; i++) {
	//	for (int j = 0; j < 32; j++) {
	//		cout << M[i][j] << " ";
	//	}
	//	cout << endl;
	//}

	for (int i = 0; i < 32; i++) {
		M[i][i] = 0; // убираем все петли, так как они не влияют на эйлеровость
					 // в принципе можно и без этого шага, но пусть будет для уточнения того, что петли не влияют на игру
	}

	for (int i = 0; i < 32; i++) {
		int column = 0;
		int line = 0;
		for (int j = 0; j < 32; j++) {
			line += M[i][j];
			column += M[j][i];
		}
		if (line != column) {
			cout << "Мы не можем составить цепочку" << endl;
			system("pause");
			return 0;
		}
	}

	cout << "Мы можем составить цепочку" << endl;
	
	system("pause");
	return 0;
}